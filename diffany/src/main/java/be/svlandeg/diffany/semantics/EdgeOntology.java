package be.svlandeg.diffany.semantics;

import java.util.*;

import be.svlandeg.diffany.concepts.EdgeDefinition;

/**
 * This class takes care of the semantic interpretation of different edge types and their corresponding categories
 * in the 'source' networks, i.e. the reference and condition-specific networks used as input.
 * It can define a differential edge by inspecting the two original edges (implemented by overriding classes).
 * Additionally, an overlapping edge can be generated by taking into account the edge type-to-category mapping
 * and the direct super classes of categories.
 * 
 * (TODO: implement a more extensive ontology tree rather than only 1-level parent-child mappings)
 * 
 * @author Sofie Van Landeghem
 */
public abstract class EdgeOntology
{

	public static final String VOID_TYPE = EdgeDefinition.getVoidEdge().getType().toLowerCase();

	private Map<String, String> sourceCatHierarchy;

	private Map<String, String> mapSourceEdgeToCategory;
	private Set<String> allSourceCategories;

	private Set<String> allDiffCategories;

	/**
	 * Create an empty ontology, with no edge categories or any mapping defined
	 */
	public EdgeOntology()
	{
		removeAllCategoriesAndMappings();
		sourceCatHierarchy = new HashMap<String, String>();
	}

	/**
	 * Method that defines the differential edge from the corresponding edge categories in the reference and condition-specific networks.
	 * Returns EdgeDefinition.getVoidEdge() when the edge should be deleted (i.e. not present in differential network).
	 * 
	 * @param refEdge the edge definition in the reference network (can be a EdgeDefinition.getVoidEdge() when non-existing)
	 * @param conEdges the edge definitions in the condition-specific networks (can be EdgeDefinition.getVoidEdge() when non-existing)
	 * @param cutoff the minimal value of a resulting edge for it to be included in the differential network
	 * 
	 * @return the edge definition in the differential network, or EdgeDefinition.getVoidEdge() when there should be no such edge (never null).
	 * @throws IllegalArgumentException when the type of the reference or condition-specific edge does not exist in this ontology
	 */
	public abstract EdgeDefinition getDifferentialEdge(EdgeDefinition refEdge, Set<EdgeDefinition> conEdges, double cutoff) throws IllegalArgumentException;

	/**
	 * Method that defines the overlapping edge from the corresponding edge categories in the reference and condition-specific networks.
	 * Returns EdgeDefinition.getVoidEdge() when the edge should be deleted (i.e. not present in the overlapping network).
	 * 
	 * @param refEdge the edge definition in the reference network (can be a EdgeDefinition.getVoidEdge() when non-existing)
	 * @param conEdge the edge definition in the condition-specific network (can be a EdgeDefinition.getVoidEdge() when non-existing)
	 * @param cutoff the minimal value of a resulting edge for it to be included in the overlapping network
	 * @param minOperator whether or not to take the minimum of the edge weights - if false, the maximum is taken
	 * 
	 * @return the edge definition in the overlapping network, or EdgeDefinition.getVoidEdge() when there should be no such edge (never null).
	 * @throws IllegalArgumentException when the type of the reference or condition-specific edge does not exist in this ontology
	 */
	public EdgeDefinition getOverlapEdge(Set<EdgeDefinition> edges, double cutoff, boolean minOperator) throws IllegalArgumentException
	{
		if (edges == null || edges.isEmpty())
		{
			String errormsg = "The set of edges should not be null or empty!";
			throw new IllegalArgumentException(errormsg);
		}
		EdgeDefinition overlap_edge = new EdgeDefinition();

		int countEdges = edges.size();

		int countNegated = 0;
		int countSymmetrical = 0;

		double minWeight = Double.MAX_VALUE;
		double maxWeight = Double.MIN_VALUE;

		for (EdgeDefinition e : edges)
		{
			if (e.isNegated())
				countNegated++;

			if (e.isSymmetrical())
				countSymmetrical++;

			double weight = e.getWeight();
			if (weight < minWeight)
				minWeight = weight;
			if (weight > maxWeight)
				maxWeight = weight;
		}

		if (countNegated != 0 && countNegated != countEdges) // some are
																// negated, some
																// are not -> no
																// overlap
		{
			return EdgeDefinition.getVoidEdge();
		}
		boolean overlapNegated = countNegated == countEdges;
		overlap_edge.makeNegated(overlapNegated);

		overlap_edge.makeSymmetrical(countSymmetrical == countEdges);

		// the overlapping weight is the minimum between the two, or the maximum
		// if specified as such
		double overlapWeight = minWeight;
		if (!minOperator)
		{
			overlapWeight = maxWeight;
		}
		if (overlapWeight <= cutoff)
		{
			return EdgeDefinition.getVoidEdge();
		}
		overlap_edge.setWeight(overlapWeight);

		Map<String, Integer> parentCatsByCount = new HashMap<String, Integer>();
		Map<String, Integer> childrenCatsByCount = new HashMap<String, Integer>();
		Map<String, Integer> parentByDepth = new HashMap<String, Integer>();
		Map<String, Integer> childByDepth = new HashMap<String, Integer>();

		for (EdgeDefinition e : edges)
		{
			int depth = 0;
			String cat = getSourceCategory(e.getType());
			addOne(parentCatsByCount, cat);
			recordMaxDepth(parentByDepth, cat, depth);
			
			String parentCat = retrieveParent(cat);
			while (parentCat != null)
			{
				depth++;
				addOne(parentCatsByCount, parentCat);
				recordMaxDepth(parentByDepth, parentCat, depth);
				parentCat = retrieveParent(parentCat);
			}
			depth = 0;
			addOne(childrenCatsByCount, cat);
			recordMaxDepth(childByDepth, cat, depth);
			Set<String> childrenCats = retrieveChildren(cat);
			while (childrenCats.size() > 0)
			{
				Set<String> newChildrenCats = new HashSet<String>();
				depth++;
				for (String child : childrenCats)
				{
					addOne(childrenCatsByCount, child);
					recordMaxDepth(childByDepth, child, depth);
					newChildrenCats.addAll(retrieveChildren(child));
				}
				childrenCats = newChildrenCats;
			}
		}

		Set<String> minimalParents = new HashSet<String>();
		for (String cat : parentCatsByCount.keySet())
		{
			if (parentCatsByCount.get(cat) == countEdges)
				minimalParents.add(cat);
		}
		if (minimalParents.size() < 1) // no category covers all of the edges
		{
			return EdgeDefinition.getVoidEdge();
		}
		
		int minParentDepth = Integer.MAX_VALUE;
		for (String foundCat : minimalParents)
		{
			int foundDepth = parentByDepth.get(foundCat);
			minParentDepth = Math.min(minParentDepth, foundDepth);
		}
		for (String cat : parentByDepth.keySet())
		{
			int thisDepth = parentByDepth.get(cat);
			if (thisDepth != minParentDepth)
			{
				minimalParents.remove(cat);	// don't keep more general categories if there is a more specific common parent
			}
		}
		
		Set<String> minimalChildren = new HashSet<String>();
		for (String cat : childrenCatsByCount.keySet())
		{
			if (childrenCatsByCount.get(cat) == countEdges)
				minimalChildren.add(cat);
		}
		int minChildDepth = Integer.MAX_VALUE;
		for (String foundCat : minimalChildren)
		{
			int foundDepth = childByDepth.get(foundCat);
			minChildDepth = Math.min(minChildDepth, foundDepth);
		}
		for (String cat : childByDepth.keySet())
		{
			int thisDepth = childByDepth.get(cat);
			if (thisDepth != minChildDepth)
			{
				minimalChildren.remove(cat);	// don't keep more general categories if there is a more specific common parent
			}
		}
		
		if (minParentDepth == 0 || !overlapNegated)	//  the shared edge is the (first) common super class 
		{
			// if there are multiple common parents, equally close (minimal depth), we take the first one at random
			overlap_edge.setType(minimalParents.iterator().next());
			return overlap_edge;
		} 
		else if (minimalChildren.size() > 0) 	// the shared edge is the negation of the (first) common subclass, if there is one such
		{
			overlap_edge.setType(minimalChildren.iterator().next());
			return overlap_edge;
		}

		return EdgeDefinition.getVoidEdge();
	}

	/**
	 * Private method that increments a specific type in a category-to-count hashmap.
	 * 
	 * @param catByCount the hashmap holding the counts
	 * @param cat the category that needs to be incremented
	 */
	private void addOne(Map<String, Integer> catByCount, String cat)
	{
		if (!catByCount.containsKey(cat))
			catByCount.put(cat, 0);
		catByCount.put(cat, catByCount.get(cat) + 1);
	}

	/**
	 * Private method that holds the max depth value of a category mapping:
	 * each time a new depth is found, it influences the new maximum of the map
	 * 
	 * @param catByDepth the hashmap holding the depths
	 * @param depth the newly found depth of the category
	 * @param cat the category that needs to be adjusted in depth
	 */
	private void recordMaxDepth(Map<String, Integer> catByDepth, String cat, int depth)
	{
		int previousDepth = 0;
		if (catByDepth.containsKey(cat))
			previousDepth = catByDepth.get(cat);
		catByDepth.put(cat, Math.max(depth, previousDepth));
	}

	/**
	 * Get the semantic category of a certain edge type.
	 * Matching is done independent of upper/lower casing.
	 * 
	 * @param edgeType the original type of the edge in a network
	 * @return the semantic category of that edge or null if it is not mapped in this ontology
	 */
	public String getSourceCategory(String edgeType)
	{
		return mapSourceEdgeToCategory.get(edgeType.toLowerCase());
	}

	/**
	 * Check whether a certain edge type is present in this ontology.
	 * Matching is done independent of upper/lower casing.
	 * 
	 * @param edgeType the original type of the edge in a network
	 * @return whether or not this edge type is present in this ontology
	 */
	protected boolean isDefined(String edgeType)
	{
		if (edgeType == null)
		{
			return false;
		}
		return mapSourceEdgeToCategory.containsKey(edgeType.toLowerCase());
	}

	/**
	 * Return all source (input) categories present in this ontology.
	 * @return the set of categories mapped in this ontology.
	 */
	public Set<String> getAllSourceCategories()
	{
		return allSourceCategories;
	}

	/**
	 * Return all differential categories present in this ontology.
	 * @return the set of categories mapped in this ontology.
	 */
	public Set<String> getAllDiffCategories()
	{
		return allDiffCategories;
	}

	/**
	 * Add a differential category (casing independent)
	 * @param category the category that should be added to this ontology
	 * @throws IllegalArgumentException when the category is null
	 */
	protected void addDiffCategory(String category) throws IllegalArgumentException
	{
		if (category == null)
		{
			String errormsg = "The category should not be null!";
			throw new IllegalArgumentException(errormsg);
		}
		allDiffCategories.add(category.toLowerCase());
	}

	/**
	 * Add a number of differential categories (casing independent)
	 * @param categories the categories that should be added to this ontology
	 */
	protected void addDiffCategories(Set<String> categories)
	{
		for (String c : categories)
		{
			allDiffCategories.add(c.toLowerCase());
		}
	}

	/**
	 * Add a source category (casing independent)
	 * @param category the category that should be added to this ontology
	 * @throws IllegalArgumentException when the category is null
	 */
	protected void addSourceCategory(String category) throws IllegalArgumentException
	{
		if (category == null)
		{
			String errormsg = "The category should not be null!";
			throw new IllegalArgumentException(errormsg);
		}
		allSourceCategories.add(category.toLowerCase());
	}

	/**
	 * Add a number of source categories (casing independent)
	 * @param categories the categories that should be added to this ontology
	 */
	protected void addSourceCategories(Set<String> categories)
	{
		for (String c : categories)
		{
			allSourceCategories.add(c.toLowerCase());
		}
	}

	/**
	 * Define a child category and its parent category. The child should not have received a parent before.
	 * @param childCat the child category (subclass)
	 * @param parentCat the parent category (superclass)
	 * @throws IllegalArgumentException when the childCat was already previously
	 * attached to a parent or if either of the two categories are not defined in this ontology
	 */
	protected void putSourceParent(String childCat, String parentCat) throws IllegalArgumentException
	{
		if (sourceCatHierarchy.containsKey(childCat))
		{
			String errormsg = "The provided child category ('" + childCat + "') already has a parent category!";
			throw new IllegalArgumentException(errormsg);
		}
		if (!allSourceCategories.contains(childCat.toLowerCase()))
		{
			String errormsg = "The provided child category ('" + childCat + "') does not exist in this ontology!";
			throw new IllegalArgumentException(errormsg);
		}
		if (!allSourceCategories.contains(parentCat.toLowerCase()))
		{
			String errormsg = "The provided parent category ('" + parentCat + "') does not exist in this ontology!";
			throw new IllegalArgumentException(errormsg);
		}
		sourceCatHierarchy.put(childCat, parentCat);
	}

	/**
	 * Retrieve the parent category of a specific child category, or null if there is none.
	 * @param childCat the subclass category
	 * @return the superclass category, or null if there is none
	 */
	protected String retrieveParent(String childCat)
	{
		return sourceCatHierarchy.get(childCat);
	}
	
	/**
	 * Retrieve the set of child categories of a specific parent category, or an empty set if there are none.
	 * @param parentCat the superclass category
	 * @return the set of subclass categories, or an empty set if there are none.
	 */
	protected Set<String> retrieveChildren(String parentCat)
	{
		Set<String> children = new HashSet<String>();
		for (String childCat : sourceCatHierarchy.keySet())
		{
			if (sourceCatHierarchy.get(childCat).equals(parentCat))
				children.add(childCat);
		}
		return children;
	}

	/**
	 * Determine whether or not two categories are related to eachother as child (sub) - parent (super)
	 * @param childCat the subclass category
	 * @param parentCat the superclass category
	 * @return whether or not the parent relationship holds
	 */
	protected boolean isSourceChildOf(String childCat, String parentCat)
	{
		if (!sourceCatHierarchy.containsKey(childCat))
		{
			return false;
		}
		return sourceCatHierarchy.get(childCat).equals(parentCat);
	}

	/**
	 * Return the common parent of two categories, or null if there is none
	 * @param childCat1 the first child (sub) category
	 * @param childCat2 the second child (sub) category
	 * @return the common parent (super) category, or null if there is none such
	 */
	protected String commonSourceParent(String childCat1, String childCat2)
	{
		if (!sourceCatHierarchy.containsKey(childCat1))
		{
			return null;
		}
		if (!sourceCatHierarchy.containsKey(childCat2))
		{
			return null;
		}
		if (sourceCatHierarchy.get(childCat1).equals(sourceCatHierarchy.get(childCat2)))
		{
			return sourceCatHierarchy.get(childCat1);
		}
		return null;
	}

	/**
	 * Create a new mapping from edge type to category. Matching is done independent of upper/lower casing.
	 * 
	 * @param edgeType the original edge type - should not have been defined in this ontology before
	 * @param category the category to be assigned to this edge type
	 * @param overwrite determines whether or not this function may overwrite previous mappings of the same edge type
	 * @throws IllegalArgumentException when the edge type was already mapped in this ontology and overwrite is off,
	 * or when the specified category is not part of this ontology
	 */
	public void addSourceCategoryMapping(String edgeType, String category, boolean overwrite) throws IllegalArgumentException
	{
		if (!allSourceCategories.contains(category.toLowerCase()))
		{
			String errormsg = "The provided edge category ('" + category + "') does not exist in this ontology!";
			throw new IllegalArgumentException(errormsg);
		}
		if (!overwrite && mapSourceEdgeToCategory.containsKey(edgeType.toLowerCase()))
		{
			String errormsg = "The provided edge type is already mapped to a category!";
			throw new IllegalArgumentException(errormsg);
		}
		mapSourceEdgeToCategory.put(edgeType.toLowerCase(), category.toLowerCase());
	}

	/**
	 * Remove all categories and type-categoryMappings
	 */
	protected void removeAllCategoriesAndMappings()
	{
		allSourceCategories = new HashSet<String>();
		allSourceCategories.add(VOID_TYPE);

		allDiffCategories = new HashSet<String>();
		allDiffCategories.add(VOID_TYPE);

		mapSourceEdgeToCategory = new HashMap<String, String>();
		addSourceCategoryMapping(VOID_TYPE, VOID_TYPE, false);
	}

	/**
	 * Remove all type-category mappings (keeping all defined categories).
	 */
	protected void removeAllSourceCategoryMappings()
	{
		mapSourceEdgeToCategory = new HashMap<String, String>();
	}

}
